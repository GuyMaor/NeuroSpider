////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : mod_Controller_drc.vf
// /___/   /\     Timestamp : 10/17/2017 02:40:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family spartan3e -verilog mod_Controller_drc.vf -w "C:/Users/Guy/Documents/Verilog Projects/NeuroSpider/NeuroSpider/mod_Controller.sch"
//Design Name: mod_Controller
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module mod_ProcMux_MUSER_mod_Controller(cache1_DataOut, 
                                        cache2_DataOut, 
                                        proc_Addr, 
                                        proc_DataIn, 
                                        proc_WE, 
                                        sel, 
                                        cache1_Addr, 
                                        cache1_DataIn, 
                                        cache1_WE, 
                                        cache2_Addr, 
                                        cache2_DataIn, 
                                        cache2_WE, 
                                        proc_DataOut);

    input [15:0] cache1_DataOut;
    input [15:0] cache2_DataOut;
    input [15:0] proc_Addr;
    input [15:0] proc_DataIn;
    input proc_WE;
    input sel;
   output [15:0] cache1_Addr;
   output [15:0] cache1_DataIn;
   output cache1_WE;
   output [15:0] cache2_Addr;
   output [15:0] cache2_DataIn;
   output cache2_WE;
   output [15:0] proc_DataOut;
   
   
   mod_Demux16  XLXI_1 (.inPort(proc_DataIn[15:0]), 
                       .sel(sel), 
                       .outPort1(cache1_DataIn[15:0]), 
                       .outPort2(cache2_DataIn[15:0]));
   mod_Demux16  XLXI_2 (.inPort(proc_Addr[15:0]), 
                       .sel(sel), 
                       .outPort1(cache1_Addr[15:0]), 
                       .outPort2(cache2_Addr[15:0]));
   mod_Mux16  XLXI_3 (.inPort1(cache1_DataOut[15:0]), 
                     .inPort2(cache2_DataOut[15:0]), 
                     .sel(sel), 
                     .outPort(proc_DataOut[15:0]));
   mod_Demux  XLXI_4 (.inVal(proc_WE), 
                     .sel(sel), 
                     .out1(cache1_WE), 
                     .out2(cache2_WE));
endmodule
`timescale 1ns / 1ps

module mod_Controller(AddressInput, 
                      clk, 
                      DataInput, 
                      DataOutIndex, 
                      DataOutLayer, 
                      DataOutWeights, 
                      OpFinishMUXSIG, 
                      StartNeuronOperation, 
                      WriteEnable, 
                      actFuncSel, 
                      AddrInIndex, 
                      AddrInLayer, 
                      AddrInWeights, 
                      cacheSel, 
                      DataInIndex, 
                      DataInLayer, 
                      DataInWeights, 
                      OutputData, 
                      ReadyForNextOperation, 
                      rst, 
                      WEIndex, 
                      WELayer, 
                      WEWeights);

    input [15:0] AddressInput;
    input clk;
    input [15:0] DataInput;
    input [15:0] DataOutIndex;
    input [15:0] DataOutLayer;
    input [15:0] DataOutWeights;
    input OpFinishMUXSIG;
    input StartNeuronOperation;
    input WriteEnable;
   output [1:0] actFuncSel;
   output [15:0] AddrInIndex;
   output [15:0] AddrInLayer;
   output [15:0] AddrInWeights;
   output [1:0] cacheSel;
   output [15:0] DataInIndex;
   output [15:0] DataInLayer;
   output [15:0] DataInWeights;
   output [15:0] OutputData;
   output ReadyForNextOperation;
   output rst;
   output WEIndex;
   output WELayer;
   output WEWeights;
   
   wire ReadyForNextOp;
   wire StartOperation;
   wire [15:0] XLXN_1;
   wire [15:0] XLXN_2;
   wire XLXN_3;
   wire [15:0] XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire [15:0] XLXN_25;
   wire [15:0] XLXN_26;
   wire XLXN_27;
   wire [15:0] XLXN_28;
   
   mod_ControlRegisters  XLXI_1 (.beginOp(StartNeuronOperation), 
                                .cacheDataOut(XLXN_8[15:0]), 
                                .clk(clk), 
                                .fsmReadyForNextOp(ReadyForNextOp), 
                                .inAddr(AddressInput[15:0]), 
                                .inData(DataInput[15:0]), 
                                .WE(WriteEnable), 
                                .actFuncSel(actFuncSel[1:0]), 
                                .cacheAddrIn(XLXN_2[15:0]), 
                                .cacheDataIn(XLXN_1[15:0]), 
                                .cacheSel(cacheSel[1:0]), 
                                .cacheWE(XLXN_3), 
                                .fsmBeginOp(StartOperation), 
                                .outData(OutputData[15:0]), 
                                .paramNOTLayer(XLXN_9), 
                                .readyForNextOp(ReadyForNextOperation), 
                                .weightNOTIndex(XLXN_10));
   mod_ProcMux_MUSER_mod_Controller  XLXI_3 
         (.cache1_DataOut(DataOutIndex[15:0]), 
                                            
         .cache2_DataOut(DataOutWeights[15:0]), 
                                            .proc_Addr(XLXN_26[15:0]), 
                                            .proc_DataIn(XLXN_25[15:0]), 
                                            .proc_WE(XLXN_27), 
                                            .sel(XLXN_10), 
                                            .cache1_Addr(AddrInIndex[15:0]), 
                                            .cache1_DataIn(DataInIndex[15:0]), 
                                            .cache1_WE(WEIndex), 
                                            .cache2_Addr(AddrInWeights[15:0]), 
                                            
         .cache2_DataIn(DataInWeights[15:0]), 
                                            .cache2_WE(WEWeights), 
                                            .proc_DataOut(XLXN_28[15:0]));
   mod_ProcMux_MUSER_mod_Controller  XLXI_4 
         (.cache1_DataOut(DataOutLayer[15:0]), 
                                            .cache2_DataOut(XLXN_28[15:0]), 
                                            .proc_Addr(XLXN_2[15:0]), 
                                            .proc_DataIn(XLXN_1[15:0]), 
                                            .proc_WE(XLXN_3), 
                                            .sel(XLXN_9), 
                                            .cache1_Addr(AddrInLayer[15:0]), 
                                            .cache1_DataIn(DataInLayer[15:0]), 
                                            .cache1_WE(WELayer), 
                                            .cache2_Addr(XLXN_26[15:0]), 
                                            .cache2_DataIn(XLXN_25[15:0]), 
                                            .cache2_WE(XLXN_27), 
                                            .proc_DataOut(XLXN_8[15:0]));
   mod_ControlFSM  XLXI_5 (.clk(clk), 
                          .finishedOp(OpFinishMUXSIG), 
                          .StartOp(StartOperation), 
                          .readyNextOp(ReadyForNextOp), 
                          .resetEverything(rst));
endmodule
